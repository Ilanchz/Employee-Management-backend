#to define configuration properties for the application.

spring.application.name=employee_management
# Configure H2 Database : data is stored in RAM and not in disk
#in- memory database, deletes once app stops
#jdbc: Indicates that this is a JDBC (Java Database Connectivity) URL.
#h2: Specifies that the database type is H2.
#mem: Specifies that the database should be an in-memory database.
#testdb: The name of the in-memory database. This can be any name you choose.


#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


# Configure Hibernate : a framework which Hibernate, combined with Spring Boot, can handle the tasks(of creating tables, adding entries)
# for us automatically based on the entity classes you define.

spring.jpa.hibernate.ddl-auto=none

#use update for letting hibernate create the schema automatically.

# H2 Console Settings (optional, for accessing H2 console)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console



#For SQL DATABASE CONNECTOR
spring.datasource.url=jdbc:mysql://localhost:3306/emp_management?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=Ilan@2004
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


 # To disable automatic schema generation by Hibernate





#spring.jpa.hibernate.ddl-auto Options
#none: No change to the database schema.
#validate: Validate the schema, make no changes to the database.
#update: Update the database schema if necessary (e.g., adding new columns to an existing table).
#create: Create a new schema, destroying previous data.
#create-drop: Create a new schema and drop it when the session ends




# Show SQL: enables logging of generated SQL statements
spring.jpa.show-sql=true
# executes data.sql file whenever h2 database reloads
#spring.sql.init.mode=always
spring.sql.init.mode=never
#ensures that your SQL initialization scripts (schema.sql and data.sql) are executed each time your Spring Boot application starts


# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html

